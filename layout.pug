doctype html
html(lang="en")
  head
    block title

    meta(charset="utf-8")
    meta(name="viewport", content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no")

    link(rel="stylesheet", href="node_modules/reveal.js/css/reveal.css")
    link(rel="stylesheet", href="css/djs.css")

    //- <!-- Used for code syntax highlighting -->
    //- link(rel="stylesheet", href="node_modules/reveal.js/lib/css/zenburn.css")

    script.
      var link = document.createElement('link');
      link.rel = 'stylesheet';
      link.type = 'text/css';
      link.href = (window.location.search.match(/print-pdf/gi) ?
                   'node_modules/reveal.js/css/print/pdf.css' :
                   'node_modules/reveal.js/css/print/paper.css');
      document.getElementsByTagName('head')[0].appendChild(link);

  body
    .reveal
      .slides
        block slides

    script(src="node_modules/reveal.js/lib/js/head.min.js")
    script(src="node_modules/reveal.js/js/reveal.js")

    //- sets use_livereload, use_sync, for_web variables
    script(src="js/config.js")

    script.
      var css = document.createElement('style');
      css.type = "text/css";
      if (for_web) {
        css.innerHTML = ".not-for-web { display: none; }";
      } else {
        css.innerHTML = ".for-web { display: none; }";
      }
      if (use_sync && !for_web) {
        css.innerHTML += "\n.reveal .slides { border: 1px dashed #ccc; }"
      }
      document.getElementsByTagName('head')[0].appendChild(css);

      // Functions to skip to next/previous slide
      // Based on rejected PR: https://github.com/hakimel/reveal.js/pull/371
      function nextSlide() {
          var idx = Reveal.getIndices();
          if (Reveal.availableRoutes().down) {
              Reveal.slide(idx.h, idx.v + 1);
          } else if (Reveal.availableRoutes().right) {
              Reveal.slide(idx.h + 1);
          }
          navigateLastFragment();
      }
      function prevSlide() {
          var idx = Reveal.getIndices();
          if (Reveal.availableRoutes().up) {
              Reveal.slide(idx.h, idx.v - 1, 99999);
              navigateLastFragment();
          } else if (Reveal.availableRoutes().left) {
              Reveal.slide(idx.h - 1, 99999);
              navigateLastFragment();
          }
      }
      function navigateLastFragment() {
          var fragments = Reveal.getCurrentSlide().querySelectorAll('.fragment');
          var maxIdx = -1;
          for (var i = 0; i < fragments.length; i++) {
              var f = parseInt(fragments[i].dataset.fragmentIndex || 0, 10);
              if (f > maxIdx) {
                  maxIdx = f;
              }
          }
          Reveal.navigateFragment(maxIdx);
      }

      // More info: https://github.com/hakimel/reveal.js#dependencies
      var deps = [
        {src: 'node_modules/reveal.js-notes-pointer/notes-pointer.js', async: true},

        // If you're using syntax highlighting, you might need to uncomment
        // the zenburn CSS line above.
        // {src: 'node_modules/reveal.js/plugin/highlight/highlight.js', async: true, callback: function() { hljs.initHighlightingOnLoad(); }},

        {src: 'node_modules/reveal.js-menu/menu.js', async: true},

        // Handles automatic video playing
        {src: 'js/video-autoplay.js', async: true}
      ]

      if (use_sync) {
        deps.push({src: 'js/reveal-pug-sync.js', async: true});
      }
      if (use_livereload) {
        var src = 'http://' + (location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1';

        var script = document.createElement('script');
        script.src = src;
        document.body.appendChild(script);

        // doesn't work:  deps.push({src: src});
      }

      // More info: https://github.com/hakimel/reveal.js#configuration
      Reveal.initialize({
          history: true,
          progress: false,
          controls: for_web,

          slideNumber: false,
          // slideNumber: function() {
          //     // don't show .1 if first of vertical stack
          //     var idx = Reveal.getIndices();
          //     var value = [idx.h + 1];
          //     if (idx.v > 0) {
          //         value.push('/');
          //         value.push(idx.v);
          //     }
          //     return value;
          // },

          keyboard: {
              40: 'next',  // down arrow: act like spacebar
              38: 'prev',  // up arrow: opposite of down arrow
              33: prevSlide, // page up: previous slide
              34: nextSlide  // page down: next slide
          },

          menu: {
              themes: false,
              transitions: false,
              openButton: false,
              markers: true,
              numbers: true
          },

          fragmentInURL: use_livereload,

          dependencies: deps
      });
