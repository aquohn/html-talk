#!/usr/bin/env node

const child_process = require('child_process');
const minimist = require('minimist');
const os = require('os');
const path = require('path');
const split2 = require('split2');

let args = minimist(process.argv, {
    'default': {port: 5000, lrport: 35729, syncport: 35730,
                dir: path.dirname(__dirname),
                http: true, watch: true, sync: true,
                editor: process.env.TALK_EDITOR || "subl",
                procs: os.cpus().length},
    'alias': {p: 'port', d: 'dir', j: 'procs'},
    'boolean': ['http', 'watch', 'sync'],
    'string': 'procs' // no int option in minimist :|
});
let make_j = `-j${args.procs}`;

// set variables that'll be inherited by make
process.env.USE_LIVERELOAD = args.watch ? 'true' : 'false';
process.env.USE_SYNC = args.sync ? 'true' : 'false';

// initial build
console.log("Initial build:");
child_process.spawnSync(
    'make', [make_j, 'clean-config', 'all'], {cwd: args.dir, stdio: 'inherit'});
console.log();

// start web server
if (args.http) {
    const express = require('express');
    const serveStatic = require('serve-static');

    console.log(`Web server running at http://localhost:${args.port}/`);
    var server = express();
    server.use(serveStatic(args.dir));
    server.listen(args.port);
}


function runEditorCommand(cmd, args) {
    child_process
        .spawn(cmd, args, {stdio: 'inherit'})
        .on('close', (code) => {
            if (code != 0) {
                console.error(`${cmd} returned code ${code}...`);
            }
        })
        .on('error', (e) => {
            console.error(`Couldn't call ${cmd}: ${e}`);
        });
}

let scrollEditorTo;
switch (args.editor) {
    case "atom":
    case "subl":
        scrollEditorTo = (file, line, column) => {
            runEditorCommand(args.editor, [`${file}:${line}:${column}`]);
        };
        break;
    case "gvim":
    case "mvim":
        scrollEditorTo = (file, line, column) => {
            runEditorCommand(
                args.editor,
                ['--remote-silent', `+call cursor(${line}, ${column})`, file]);
        };
        break;
    case "kate":
        scrollEditorTo = (file, line, column) => {
            runEditorCommand(
                args.editor, ['--use', '--line', line, '--column', column]);
        };
        break;
    default:
        console.error(`Unknown editor ${args.editor}`);
        scrollEditorTo = (file, line, column) => {};
        break;
}

if (args.sync) {
    const WebSocket = require('ws');
    let syncserver = new WebSocket.Server({port: args.syncport});
    console.log(`Sync server started (port ${args.syncport}).`);

    syncserver.tellKind = (kind, command) => {
        syncserver.clients.forEach((client) => {
            if (client.kind == kind && client.readyState === WebSocket.OPEN) {
                client.send(command);
            }
        });
    };

    syncserver.on('connection', (ws) => {
        ws.on('message', (data) => {
            data = JSON.parse(data);
            if (data[0] == "hello") {
                ws.kind = data[1];
            } else if (data[0] == "error") {
                console.error("Sync error: " + JSON.stringify(data.slice(1)));
            } else if (data[0] == "editor" && data[1] == "scroll-to") {
                let file = data[2], line = data[3], column = data[4];
                scrollEditorTo(file, line, column);
            } else {
                syncserver.tellKind(data[0], JSON.stringify(data.slice(1)));
            }
        });
        ws.on('error', (e) => {
            switch (e.code) {
                default:
                    console.log(`client error: ${e}`);
                    break;
                case "ECONNRESET": break;
            }
        });
    });
}

if (args.watch) {
    const chokidar = require('chokidar');
    const livereload = require('livereload');
    const locks = require('locks');

    // start livereload server
    let lrserver = livereload.createServer({port: args.lrport});
    console.log(`LiveReload server started (port ${args.lrport}).\n`);

    // Don't want to run make synchronously here or else the servers will hang.
    // So we only run one make at a time. When the make finishes, it refreshes
    // the thing that kicked it off. Example:
    //   - I edit slides.pug
    //   - make (called by change to slides.pug): edits index.html
    //   - refresh slides.pug (does nothing)
    //   - make (called by change to index.html): doesn't change anything
    //   - refresh index.html
    let mutex = locks.createMutex();
    let makeOpts = {cwd: args.dir, stdio: ['inherit', 'pipe', 'inherit']};
    let make = (path) => {
        mutex.lock(() => {
            let make = child_process.spawn('make', [make_j], makeOpts);
            make.stdout.pipe(split2()).on('data', (line) => {
                if (!line.match(/make: Nothing to be done for [`']all'\./)) {
                    console.log(line);
                }
            });
            make.on('exit', (code) => {
                if (code != 0) {
                    console.error(String.fromCharCode(7));
                }
                lrserver.refresh(path);
                mutex.unlock();
            });
        });
    };

    let ignored = /\/(node_modules|\.git|\.ipynb_checkpoints)\/|(js\/config\.js|bin\/serve|README.md|package(-lock)?\.json|\.(aux|lof|log|lot|fls|out|toc|fmt|fot|cb2?|lb|sublime-.*|gitignore))$/;
    chokidar.watch(args.dir, {ignored: ignored, ignoreInitial: true})
            .on('ready', (event, path) => { make('index.html'); })
            .on('all', (event, path) => { make(path); });
}
